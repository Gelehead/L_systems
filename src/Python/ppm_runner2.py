#!/usr/bin/python
"""
PPM Runner - A script to display PPM images generated by the L-systems project
"""

import sys
import os
import tkinter as tk
from tkinter import Canvas, Frame, Scrollbar
from PIL import Image, ImageTk

def read_ppm_file(filename):
    """
    Read a PPM file in P3 format (ASCII) and convert it to a PIL Image
    """
    try:
        with open(filename, 'r') as f:
            # Read the header
            magic_number = f.readline().strip()
            if magic_number != 'P3':
                raise ValueError(f"Unsupported PPM format: {magic_number}. Expected P3.")
            
            # Skip comments if any
            line = f.readline().strip()
            while line.startswith('#'):
                line = f.readline().strip()
            
            # Parse width and height
            dimensions = line.split()
            if len(dimensions) != 2:
                # Try to read the next line if dimensions not found on this line
                dimensions = f.readline().strip().split()
            
            width, height = map(int, dimensions)
            
            # Read max color value
            max_color = int(f.readline().strip())
            
            # Read the pixel data
            pixel_data = []
            # Read all remaining lines, joining them into a single string
            content = f.read()
            # Split by whitespace to get all values
            values = [int(val) for val in content.split()]
            
            # Group values into RGB triplets
            for i in range(0, len(values), 3):
                if i + 2 < len(values):  # Make sure we have a complete RGB triplet
                    r, g, b = values[i:i+3]
                    pixel_data.append((r, g, b))
            
            # Create the image
            img = Image.new('RGB', (width, height))
            img.putdata(pixel_data[:width*height])  # In case there's extra data
            return img
            
    except Exception as e:
        print(f"Error reading PPM file: {e}")
        return None

def display_image(img, title="PPM Viewer"):
    """
    Display the image using Tkinter
    """
    if img is None:
        print("No image to display")
        return
    
    # Create the main window
    root = tk.Tk()
    root.title(title)
    
    # Get screen dimensions
    screen_width = root.winfo_screenwidth()
    screen_height = root.winfo_screenheight()
    
    # Calculate window size (limit to 80% of screen)
    img_width, img_height = img.size
    window_width = min(img_width + 20, int(screen_width * 0.8))
    window_height = min(img_height + 20, int(screen_height * 0.8))
    
    # Set window size and position
    root.geometry(f"{window_width}x{window_height}+{(screen_width - window_width)//2}+{(screen_height - window_height)//2}")
    
    # Create a frame with scrollbars
    frame = Frame(root)
    frame.pack(fill=tk.BOTH, expand=True)
    
    # Add horizontal and vertical scrollbars
    h_scrollbar = Scrollbar(frame, orient=tk.HORIZONTAL)
    h_scrollbar.pack(side=tk.BOTTOM, fill=tk.X)
    
    v_scrollbar = Scrollbar(frame, orient=tk.VERTICAL)
    v_scrollbar.pack(side=tk.RIGHT, fill=tk.Y)
    
    # Create a canvas to display the image
    canvas = Canvas(frame, xscrollcommand=h_scrollbar.set, yscrollcommand=v_scrollbar.set)
    canvas.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)
    
    # Configure the scrollbars
    h_scrollbar.config(command=canvas.xview)
    v_scrollbar.config(command=canvas.yview)
    
    # Convert the PIL image to a Tkinter-compatible photo image
    photo = ImageTk.PhotoImage(img)
    
    # Add the image to the canvas
    canvas.create_image(0, 0, image=photo, anchor=tk.NW)
    
    # Configure the canvas scroll region
    canvas.config(scrollregion=canvas.bbox(tk.ALL))
    
    # Run the Tkinter main loop
    root.mainloop()

def main():
    # Check if a filename was provided as an argument
    if len(sys.argv) != 2:
        print("Usage: python ppm_runner.py <ppm_file>")
        return
    
    # Get the filename from the command line arguments
    filename = sys.argv[1]
    
    # Check if the file exists
    if not os.path.isfile(filename):
        print(f"Error: File '{filename}' not found.")
        return
    
    # Read the PPM file
    img = read_ppm_file(filename)
    
    # Display the image
    if img:
        display_image(img, f"PPM Viewer - {os.path.basename(filename)}")
    else:
        print("Failed to load image.")

if __name__ == "__main__":
    main()